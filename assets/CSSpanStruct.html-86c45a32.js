import{_ as t,r as e,o as p,c as o,a as n,b as s,e as c,f as l}from"./app-1f38d2ad.js";const i={},u=n("h1",{id:"c-span-t-struct",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-span-t-struct","aria-hidden":"true"},"#"),s(" C# "),n("code",null,"Span<T>"),s(" Struct")],-1),r={href:"https://learn.microsoft.com/en-us/dotnet/api/system.span-1?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>这个结构，提供了一种类型安全且内存安全的方式来表示连续的任意内存区域。它是如何体现这些特性的呢？</p><ul><li>Type-Safety：<code>Span&lt;T&gt;</code>是一个泛型结构体，这样它在编译期就强制的类型安全，否则会编译错误。你只能用T表示的类型来处理内存，不会出现类型错误导致的运行时错误。</li><li>边界检测：它会检测表示内存的边界，如果超出合法范围会抛出异常，但是不会发生异常内存访问导致的crash等问题。</li><li>Stack-only：只能在栈上使用，这就表示它不会产生内存泄露，一定会被合理释放。</li><li>支持切片：比如可以表示某数组的一部分内容，并且不需要进行内存复制，非常高效。</li><li>可以应用于大量的内存结构，适用性广泛。</li></ul><p>下面摘取一些示例代码进行演示：</p><p>表示数组，并进行内存访问：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> arraySpan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Span<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">byte</span></span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ctr <span class="token operator">&lt;</span> arraySpan<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> ctr<span class="token operator">++</span><span class="token punctuation">)</span>
    arraySpan<span class="token punctuation">[</span>ctr<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token operator">++</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">int</span></span> arraySum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token keyword">in</span> array<span class="token punctuation">)</span>
    arraySum <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;The sum is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">arraySum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Slice功能：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Program2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> contentLength <span class="token operator">=</span> <span class="token string">&quot;Content-Length: 132&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> length <span class="token operator">=</span> <span class="token function">GetContentLength</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Content length: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">length</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetContentLength</span><span class="token punctuation">(</span><span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> span<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> slice <span class="token operator">=</span> span<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GetContentLength</code> 这个接口不会产生memory alloc，通过span.slice截取了最后的数字部分，并且解析成int。</p>`,8);function d(v,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("详情可以浏览 "),n("a",r,[s("官方文档"),c(a)])]),k])}const b=t(i,[["render",d],["__file","CSSpanStruct.html.vue"]]);export{b as default};
