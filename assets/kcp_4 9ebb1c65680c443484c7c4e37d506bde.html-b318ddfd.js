import{_ as c,r as a,o as l,c as s,a as o,b as e,e as i,f as t}from"./app-95f7ada5.js";const d={},r=o("h1",{id:"kcp解读-滑动窗口",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#kcp解读-滑动窗口","aria-hidden":"true"},"#"),e(" KCP解读：滑动窗口")],-1),p={href:"https://xiaolincoding.com/network/3_tcp/tcp_feature.html#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},_=o("h2",{id:"引入窗口概念的原因",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#引入窗口概念的原因","aria-hidden":"true"},"#"),e(" 引入窗口概念的原因")],-1),g=o("p",null,"我们都知道 TCP 是每发送一个数据，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个。",-1),h=o("p",null,"这个模式就有点像我和你面对面聊天，你一句我一句。但这种方式的缺点是效率比较低的。",-1),m=o("p",null,"如果你说完一句话，我在处理其他事情，没有及时回复你，那你不是要干等着我做完其他事情后，我回复你，你才能说下一句话，很显然这不现实。",-1),x=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/14.jpg?",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/14.jpg?",tabindex:"0",loading:"lazy"},null,-1),C={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/14.jpg",target:"_blank",rel:"noopener noreferrer"},E=t('<p>所以，这样的传输方式有一个缺点：数据包的<strong>往返时间越长，通信的效率就越低</strong>。</p><p>为解决这个问题，TCP 引入了<strong>窗口</strong>这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。</p><p>那么有了窗口，就可以指定窗口大小，窗口大小就是指<strong>无需等待确认应答，而可以继续发送数据的最大值</strong>。</p><blockquote><p>窗口大小由哪一方决定？</p></blockquote><p>TCP 头里有一个字段叫 <code>Window</code>，也就是窗口大小。</p><p><strong>这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。</strong></p><p>所以，通常窗口的大小是由接收方的窗口大小来决定的。</p><p>发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。</p><h2 id="发送方的滑动窗口" tabindex="-1"><a class="header-anchor" href="#发送方的滑动窗口" aria-hidden="true">#</a> 发送方的滑动窗口</h2><p>我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：</p>',10),u=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/16.jpg?",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/16.jpg?",tabindex:"0",loading:"lazy"},null,-1),A={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/16.jpg",target:"_blank",rel:"noopener noreferrer"},f=o("ul",null,[o("li",null,"#1 是已发送并收到 ACK确认的数据：1~31 字节"),o("li",null,"#2 是已发送但未收到 ACK确认的数据：32~45 字节"),o("li",null,"#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节"),o("li",null,"#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后")],-1),k=o("p",null,"在下图，当发送方把数据「全部」都一下发送出去后，可用窗口的大小就为 0 了，表明可用窗口耗尽，在没收到 ACK 确认之前是无法继续发送数据了。",-1),P=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/17.jpg?",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/17.jpg?",tabindex:"0",loading:"lazy"},null,-1),y={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/17.jpg",target:"_blank",rel:"noopener noreferrer"},b=o("p",null,[e("在下图，当收到之前发送的数据 "),o("code",null,"32~36"),e(" 字节的 ACK 确认应答后，如果发送窗口的大小没有变化，则"),o("strong",null,"滑动窗口往右边移动 5 个字节，因为有 5 个字节的数据被应答确认"),e("，接下来 "),o("code",null,"52~56"),e(" 字节又变成了可用窗口，那么后续也就可以发送 "),o("code",null,"52~56"),e(" 这 5 个字节的数据了。")],-1),T=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/18.jpg",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/18.jpg",tabindex:"0",loading:"lazy"},null,-1),B={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/18.jpg",target:"_blank",rel:"noopener noreferrer"},H=o("blockquote",null,[o("p",null,"程序是如何表示发送方的四个部分的呢？")],-1),D=o("p",null,"TCP 滑动窗口方案使用三个指针来跟踪在四个传输类别中的每一个类别中的字节。其中两个指针是绝对指针（指特定的序列号），一个是相对指针（需要做偏移）。",-1),I=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/19.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/19.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",tabindex:"0",loading:"lazy"},null,-1),Y={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/19.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",target:"_blank",rel:"noopener noreferrer"},w=t('<ul><li><code>SND.WND</code>：表示发送窗口的大小（大小是由接收方指定的）；</li><li><code>SND.UNA</code>（<em>Send Unacknoleged</em>）：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。</li><li><code>SND.NXT</code>：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。</li><li>指向 #4 的第一个字节是个相对指针，它需要 <code>SND.UNA</code> 指针加上 <code>SND.WND</code> 大小的偏移量，就可以指向 #4 的第一个字节了。</li></ul><p>那么可用窗口大小的计算就可以是：</p><p><strong>可用窗口大小 = SND.WND -（SND.NXT - SND.UNA）</strong></p><h2 id="接收方的滑动窗口" tabindex="-1"><a class="header-anchor" href="#接收方的滑动窗口" aria-hidden="true">#</a> 接收方的滑动窗口</h2><p>接下来我们看看接收方的窗口，接收窗口相对简单一些，根据处理的情况划分成三个部分：</p><ul><li>#1 + #2 是已成功接收并确认的数据（等待应用进程读取）；</li><li>#3 是未收到数据但可以接收的数据；</li><li>#4 未收到数据并不可以接收的数据；</li></ul>',6),W=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/20.jpg",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/20.jpg",tabindex:"0",loading:"lazy"},null,-1),j={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/20.jpg",target:"_blank",rel:"noopener noreferrer"},X=t('<p>其中三个接收部分，使用两个指针进行划分:</p><ul><li><code>RCV.WND</code>：表示接收窗口的大小，它会通告给发送方。</li><li><code>RCV.NXT</code>：是一个指针，它指向期望从发送方发送来的下一个数据字节的序列号，也就是 #3 的第一个字节。</li><li>指向 #4 的第一个字节是个相对指针，它需要 <code>RCV.NXT</code> 指针加上 <code>RCV.WND</code> 大小的偏移量，就可以指向 #4 的第一个字节了。</li></ul><blockquote><p>接收窗口和发送窗口的大小是相等的吗？</p></blockquote><p>并不是完全相等，接收窗口的大小是<strong>约等于</strong>发送窗口的大小的。</p><p>因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。</p><h2 id="kcp的实现" tabindex="-1"><a class="header-anchor" href="#kcp的实现" aria-hidden="true">#</a> kcp的实现</h2><p>kcp的实现与tcp的基本相同的，其中的命名规则也是相同的，它们在源码中是如此常见，要熟悉这些变量名。这些简单列举一些关键源码：</p><p><code>Wnd_unused</code> 计算可用窗口；</p><p><code>while (Itimediff(snd_nxt, snd_una + cwnd_) &lt; 0)</code> flush中限制处理窗口中部分；</p><p><code>snd_una</code> 发送方：第一个未确认的编号，滑动窗口的左端；+cwnd_得到窗口的右端。</p><p><code>Shrink_buf</code> 更新滑动窗口</p><p><code>rmt_wnd</code> 对方的接收窗口，每次收到数据包后更新。</p><h2 id="窗口关闭" tabindex="-1"><a class="header-anchor" href="#窗口关闭" aria-hidden="true">#</a> 窗口关闭</h2><p>在前面我们都看到了，TCP 通过让接收方指明希望从发送方接收的数据大小（窗口大小）来进行流量控制。</p><p><strong>如果窗口大小为 0 时，就会阻止发送方给接收方传递数据，直到窗口变为非 0 为止，这就是窗口关闭。</strong></p><blockquote><p>窗口关闭潜在的危险</p></blockquote><p>接收方向发送方通告窗口大小时，是通过 <code>ACK</code> 报文来通告的。</p><p>那么，当发生窗口关闭时，接收方处理完数据后，会向发送方通告一个窗口非 0 的 ACK 报文，如果这个通告窗口的 ACK 报文在网络中丢失了，那麻烦就大了。</p>',18),N=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/24.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/24.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",tabindex:"0",loading:"lazy"},null,-1),z={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/24.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",target:"_blank",rel:"noopener noreferrer"},F=o("p",null,"这会导致发送方一直等待接收方的非 0 窗口通知，接收方也一直等待发送方的数据，如不采取措施，这种相互等待的过程，会造成了死锁的现象。",-1),L=o("blockquote",null,[o("p",null,"TCP 是如何解决窗口关闭时，潜在的死锁现象呢？")],-1),S=o("p",null,[e("为了解决这个问题，TCP 为每个连接设有一个持续定时器，"),o("strong",null,"只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器。")],-1),K=o("p",null,[e("如果持续计时器超时，就会发送"),o("strong",null,"窗口探测 ( Window probe ) 报文"),e("，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。")],-1),Z=o("img",{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/25.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",alt:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/25.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",tabindex:"0",loading:"lazy"},null,-1),q={href:"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%AF%E9%9D%A0%E7%89%B9%E6%80%A7/25.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0",target:"_blank",rel:"noopener noreferrer"},V=t('<ul><li>如果接收窗口仍然为 0，那么收到这个报文的一方就会重新启动持续计时器；</li><li>如果接收窗口不是 0，那么死锁的局面就可以被打破了。</li></ul><p>窗口探测的次数一般为 3 次，每次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发 <code>RST</code> 报文来中断连接。</p><h3 id="kcp的实现-1" tabindex="-1"><a class="header-anchor" href="#kcp的实现-1" aria-hidden="true">#</a> KCP的实现</h3><p>在flush中，发现对方接收窗口为0，就启动倒计时，发送探测报文。</p><p><code>if (rmt_wnd == 0)</code></p><p><code>probe |= **IKCP_ASK_SEND**;</code></p><p>收到窗口探测报文后，马上准备发送窗口告知报文</p><p><code>probe |= **IKCP_ASK_TELL**;</code></p><p>在接收数据的处理中，如果发现窗口从0变成正数，也会发送告知报文，来快速恢复窗口。</p>',9);function R(U,v){const n=a("ExternalLinkIcon");return l(),s("div",null,[r,o("p",null,[e("摘取"),o("a",p,[e("https://xiaolincoding.com/network/3_tcp/tcp_feature.html#滑动窗口"),i(n)]),e(" 的图文总结。")]),_,g,h,m,o("figure",null,[x,o("figcaption",null,[o("a",C,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/14.jpg"),i(n)]),e("?")])]),E,o("figure",null,[u,o("figcaption",null,[o("a",A,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/16.jpg"),i(n)]),e("?")])]),f,k,o("figure",null,[P,o("figcaption",null,[o("a",y,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/17.jpg"),i(n)]),e("?")])]),b,o("figure",null,[T,o("figcaption",null,[o("a",B,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/18.jpg"),i(n)])])]),H,D,o("figure",null,[I,o("figcaption",null,[o("a",Y,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/19.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0"),i(n)])])]),w,o("figure",null,[W,o("figcaption",null,[o("a",j,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/20.jpg"),i(n)])])]),X,o("figure",null,[N,o("figcaption",null,[o("a",z,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/24.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0"),i(n)])])]),F,L,S,K,o("figure",null,[Z,o("figcaption",null,[o("a",q,[e("https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/25.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0"),i(n)])])]),V])}const J=c(d,[["render",R],["__file","kcp_4 9ebb1c65680c443484c7c4e37d506bde.html.vue"]]);export{J as default};
