import{_ as t,r,o,c as l,a as e,b as s,e as a,f as i}from"./app-a798324c.js";const p={},d=i('<h1 id="使用vuepress搭建个人网站" tabindex="-1"><a class="header-anchor" href="#使用vuepress搭建个人网站" aria-hidden="true">#</a> 使用VuePress搭建个人网站</h1><p>首先简单概括一下这个技术方案，先有一个整体的概念：</p><p>使用Markdown编写文字内容，通过VuePress将其生成静态网页，最后上传到Github通过Github Pages服务托管网站。</p><p>特点：</p><ul><li>免费。例如：github, gitlab等等很多网站都提供免费的托管服务；</li><li>容易部署。不需要进行服务器配置/搭建数据库/管理依赖程序等等，生成.html文件即可。</li><li>美观。VuePress提供了强大的功能支持，Markdown扩展/美观动态的web页支持。</li></ul><p>接下来结合搭建步骤，进行详细解释。</p><div class="hint-container info"><p class="hint-container-title">静态网页</p><p>什么是静态网页？其内容是预先制作好的不会动态改变。与之对应的就是动态网页，其中的内容是动态的通过服务器程序动态填充的。比如：搜索引擎Google;购物网站taobao；社区论坛，里面的内容可以随着用户的输入或者修改动态变化。</p><blockquote><p>如果对Markdown不了解可以自行通过搜索引擎学习，有大量现有优质资料。</p></blockquote></div><h2 id="vuepress" tabindex="-1"><a class="header-anchor" href="#vuepress" aria-hidden="true">#</a> VuePress</h2>',8),c={href:"https://v2.vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://theme-hope.vuejs.press/",target:"_blank",rel:"noopener noreferrer"},h=i(`<ol><li>安装nodejs最新文档版</li><li>安装pnpm包管理工具</li><li>创建工程，<code>pnpm create vuepress-theme-hope [dir]</code>其中dir就是工程的目录名。根据脚本提示，选择适合自己的选项。</li><li>完成后可直接运行，或者在工程目录运行<code>pnpm docs:dev</code>命令运行，就可以在本地访问静态网站了。</li></ol><h2 id="定制" tabindex="-1"><a class="header-anchor" href="#定制" aria-hidden="true">#</a> 定制</h2><p>介绍一下工程的目录结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─ src
│   ├─ .vuepress #vuepress有关，配置信息等
│   │  ├─ config.ts
│   │  ├─ theme.ts
│   │  ├─ ...
│   ├─ zh # 多语言目录，里面与最外层的.md有关文件结构一致
│   ├─ posts # .md文件夹，可以自由组织目录结构
│   │  ├─ *.md
│   │  ├─ ...
│   ├─ *.md
├─ package.json # 包含工程信息，依赖内容，可执行的脚本等；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>src里面的.md文件会被生成为各种静态网页，VuePress支持多语言，其中<code>zh</code>即为多语言目录。</p><p>.vuepress中包含vuepress有关的配置脚本，其中：</p><ol><li>config.ts是vuepress的配置脚本</li><li>theme.ts是主题有关的配置脚本，可以在这里配置作者、主页信息、关联链接等等</li><li>sidebar和navbar分别是侧边栏和导航栏的配置</li></ol>`,7),m={href:"https://theme-hope.vuejs.press/zh/config/theme/basic.html",target:"_blank",rel:"noopener noreferrer"},v=i(`<h3 id="frontmatter" tabindex="-1"><a class="header-anchor" href="#frontmatter" aria-hidden="true">#</a> Frontmatter</h3><p>在markdown文件的顶部，可以使用一对&#39;---&#39;包含关于页面的配置信息，来辅助页面的渲染，这就是Frontmatter。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>---
icon: pen-to-square
date: 2023-06-11
category:
  - 趣味科技
tag:
  - vuepress
  - web
---
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://theme-hope.vuejs.press/zh/config/frontmatter/info.html",target:"_blank",rel:"noopener noreferrer"},g={class:"hint-container info"},k=e("p",{class:"hint-container-title"},"常用配置",-1),_=e("p",null,"这里我用来以下几个配置",-1),f=e("li",null,"category文章分类",-1),x=e("li",null,"tag文章标签",-1),w=e("li",null,"date创建日期",-1),y={href:"http://xn--intro-4d3hh90d.md",target:"_blank",rel:"noopener noreferrer"},G=i(`<h2 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h2><p>Github Pages可以免费部署静态网页，支持创建一个用户的个人网站；开源的项目网站数量不限；使用非常简单：</p><ol><li>创建一个名为：<em>username</em>.github.io 的仓库，username是github的用户名。</li><li>仓库根目录有一个index.html，这就是网站的主页。</li><li>使用浏览器范围<em>username</em>.github.io，就打开第2步中的index.html了。</li></ol><p>所以，只需要把生成的静态网站内容提交到指定命名的仓库就完成了网站部署。</p><p>在工程目录执行，<code>pnpm docs:build</code>命令，就可以生成静态网站到<code>src/.vuepress/dist</code>，把它提交到上面的仓库即可。</p><h3 id="自动化部署" tabindex="-1"><a class="header-anchor" href="#自动化部署" aria-hidden="true">#</a> 自动化部署</h3><p>但是每次手动上传是非常繁琐的，可以利用Github Action自动部署，设置完成后只需要修改markdown文件就可以自动完成网站的更新，可以使用Github网页或者客户端随时随地的编辑发布网站内容。</p><p>hope主题在创建工程的时候，选择使用Github Pages部署，会自动创建自动化部署的workflow文件在<code>.github/workflows/deploy-docs.yml</code>。</p><h4 id="github-action" tabindex="-1"><a class="header-anchor" href="#github-action" aria-hidden="true">#</a> Github Action</h4><p>是对开源项目免费的CI/CD工具，如果不了解CI/CD可以把它理解为，当repo变化的时候可以自动触发一台服务器clone repo并执行自定义的程序。</p><p>比如，vuepress的自动部署就是：</p><ol><li>每次repo有push内容，在一台服务器上clone工程</li><li>安装vuepress必要的系统环境，nodejs/pnpm/vuepress等</li><li>执行<code>pnpm docs:build</code>命令生成网站</li><li>将<code>src/.vuepress/dist</code>内容推送到repo的gh-pages分支</li></ol><div class="hint-container info"><p class="hint-container-title">Action可能的问题</p><ol><li>安装pnpm报错未指定版本，增加version设置<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  - name: 安装 pnpm
    uses: pnpm/action-setup@v2
    with:
      version: 8
      run_install: true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>对仓库没有访问权限，git exits with 128 在repo的GitHub Actions设置项中，Workflow Permissions选择read and write premissions，增加读写权限。</li></ol></div><p>准备就绪，可以将工程提交到Github了，参考命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># cd到vuepress工程目录</span>
<span class="token builtin class-name">cd</span> ./gmoonwalk.github.io
<span class="token function">git</span> init
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:gmoonwalk/gmoonwalk.github.io.git
<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main <span class="token comment">#修改分支名称</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交后，观察github repo中的Action页面，自动部署的Action就开始执行，正常的话网站发布就成功了。</p><h3 id="pages设置" tabindex="-1"><a class="header-anchor" href="#pages设置" aria-hidden="true">#</a> Pages设置</h3><p>最后，网站的内容成功推送到gh-pages分支，打开repo的Settings/Pages在Build and deployment的Branch选项中选择gh-pages分支。稍等几分钟后，访问<code>gmoonwalk.github.io.git</code>，个人网站就正式运行起来了。</p><h2 id="评论系统" tabindex="-1"><a class="header-anchor" href="#评论系统" aria-hidden="true">#</a> 评论系统</h2>`,19),P={href:"https://theme-hope.vuejs.press/zh/guide/feature/comment.html#giscus",target:"_blank",rel:"noopener noreferrer"},q=i(`<ol><li>直接在pages的repo设置中，开启discussion功能；</li><li>github安装Giscus应用，填写repo名，类型等，获取Giscus的参数；</li></ol><p>获得参数后，修改<code>.vuepress/theme.ts</code>文件，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token literal-property property">comment</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// You should generate and use your own comment service</span>
      <span class="token literal-property property">provider</span><span class="token operator">:</span> <span class="token string">&quot;Giscus&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">&quot;gmoonwalk/gmoonwalk.github.io&quot;</span><span class="token punctuation">,</span> <span class="token comment">// discuss的repo</span>
      <span class="token literal-property property">repoId</span><span class="token operator">:</span> <span class="token string">&quot;repoidParam&quot;</span><span class="token punctuation">,</span> <span class="token comment">//获取的参数</span>
      <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&quot;Announcements&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">categoryId</span><span class="token operator">:</span> <span class="token string">&quot;dddff&quot;</span> <span class="token comment">//获取的参数</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function V(j,A){const n=r("ExternalLinkIcon");return o(),l("div",null,[d,e("p",null,[e("a",c,[s("VuePress 2.0官网"),a(n)]),s("，是Vue驱动的静态网站生成器。官网有详尽的说明文档，可以参考。")]),e("p",null,[s("这里推荐使用"),e("a",u,[s("VuePress的Hope插件"),a(n)]),s("，安装非常简单，功能齐全、强大并且开箱即用。下面罗列一下使用步骤：")]),h,e("p",null,[s("修改了基本的网站、作者信息以后就可以直接开始使用了。详细的配置参数参考官网的文档："),e("a",m,[s("主题配置"),a(n)])]),v,e("p",null,[s("其内容为Yaml格式，可以定义文章分类、tag、创建日期、图标等等信息。更多的设置项查看详细的说明文档："),e("a",b,[s("Frontmatter"),a(n)])]),e("div",g,[k,_,e("ul",null,[f,x,w,e("li",null,[s("article默认为true，false表示不在播客列表显示。"),e("a",y,[s("例如intro.md"),a(n)])])])]),G,e("p",null,[s("我选用的Giscus，是一个基于 GitHub Discussion 的评论系统。启用很简单，参考官方文档教程即可："),e("a",P,[s("Giscus usage"),a(n)])]),q])}const I=t(p,[["render",V],["__file","vuepress.html.vue"]]);export{I as default};
